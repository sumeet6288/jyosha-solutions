import React, { useState, useEffect } from 'react';\nimport { Bell, Mail, Globe, Save, Volume2, VolumeX } from 'lucide-react';\nimport api from '../utils/api';\nimport { toast } from 'react-hot-toast';\nimport Layout from '../components/Layout';\n\nconst NotificationPreferences = () => {\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [pushSupported, setPushSupported] = useState(false);\n  const [pushEnabled, setPushEnabled] = useState(false);\n  const [preferences, setPreferences] = useState({\n    email_enabled: true,\n    email_new_conversation: true,\n    email_high_priority: true,\n    email_performance_alert: true,\n    email_usage_warning: true,\n    email_digest: 'daily',\n    email_digest_time: '09:00',\n    push_enabled: true,\n    push_new_conversation: true,\n    push_high_priority: true,\n    push_performance_alert: true,\n    push_usage_warning: true,\n    inapp_enabled: true,\n    inapp_sound: true,\n    admin_new_user_signup: true,\n    admin_webhook_events: true\n  });\n\n  useEffect(() => {\n    fetchPreferences();\n    checkPushSupport();\n  }, []);\n\n  const fetchPreferences = async () => {\n    try {\n      const response = await api.get('/api/notifications/preferences');\n      setPreferences(response.data);\n    } catch (error) {\n      console.error('Error fetching preferences:', error);\n      toast.error('Failed to load preferences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkPushSupport = () => {\n    const supported = 'Notification' in window && 'serviceWorker' in navigator && 'PushManager' in window;\n    setPushSupported(supported);\n    if (supported) {\n      setPushEnabled(Notification.permission === 'granted');\n    }\n  };\n\n  const handleToggle = (key) => {\n    setPreferences(prev => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  const handleSelectChange = (key, value) => {\n    setPreferences(prev => ({ ...prev, [key]: value }));\n  };\n\n  const requestPushPermission = async () => {\n    if (!pushSupported) {\n      toast.error('Push notifications are not supported in your browser');\n      return;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      if (permission === 'granted') {\n        setPushEnabled(true);\n        toast.success('Push notifications enabled!');\n        \n        // Register service worker and subscribe to push notifications\n        if ('serviceWorker' in navigator) {\n          const registration = await navigator.serviceWorker.register('/sw.js');\n          const subscription = await registration.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: urlBase64ToUint8Array(\n              'BEl62iUYgUivxIkv69yViEuiBIa-Ib9-SkvMeAtA3LFgDzkrxZJjSgSnfckjBJuBkr3qBUYIHBQFLXYp5Nksh8U'\n            )\n          });\n          \n          // Send subscription to backend\n          await api.post('/api/notifications/push-subscription', {\n            endpoint: subscription.endpoint,\n            keys: {\n              p256dh: arrayBufferToBase64(subscription.getKey('p256dh')),\n              auth: arrayBufferToBase64(subscription.getKey('auth'))\n            },\n            browser: navigator.userAgent\n          });\n        }\n      } else {\n        toast.error('Push notification permission denied');\n      }\n    } catch (error) {\n      console.error('Error requesting push permission:', error);\n      toast.error('Failed to enable push notifications');\n    }\n  };\n\n  const savePreferences = async () => {\n    try {\n      setSaving(true);\n      await api.put('/api/notifications/preferences', preferences);\n      toast.success('Notification preferences saved successfully!');\n    } catch (error) {\n      console.error('Error saving preferences:', error);\n      toast.error('Failed to save preferences');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Helper functions\n  const urlBase64ToUint8Array = (base64String) => {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n      .replace(/\\-/g, '+')\n      .replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  };\n\n  const arrayBufferToBase64 = (buffer) => {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n  };\n\n  if (loading) {\n    return (\n      <Layout>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600\"></div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"max-w-4xl mx-auto p-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-2\">\n            Notification Preferences\n          </h1>\n          <p className=\"text-gray-600\">Manage how and when you receive notifications</p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* In-App Notifications */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <div className=\"flex items-start gap-4 mb-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl flex items-center justify-center flex-shrink-0\">\n                <Bell className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-1\">In-App Notifications</h2>\n                <p className=\"text-gray-600 text-sm\">Receive notifications while using BotSmith</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-gray-900\">Enable in-app notifications</p>\n                  <p className=\"text-sm text-gray-500\">Show notifications in the notification center</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.inapp_enabled}\n                    onChange={() => handleToggle('inapp_enabled')}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600\"></div>\n                </label>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  {preferences.inapp_sound ? <Volume2 className=\"w-5 h-5 text-purple-600\" /> : <VolumeX className=\"w-5 h-5 text-gray-400\" />}\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Notification sound</p>\n                    <p className=\"text-sm text-gray-500\">Play a sound when receiving notifications</p>\n                  </div>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.inapp_sound}\n                    onChange={() => handleToggle('inapp_sound')}\n                    disabled={!preferences.inapp_enabled}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600 disabled:opacity-50\"></div>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Email Notifications */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <div className=\"flex items-start gap-4 mb-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center flex-shrink-0\">\n                <Mail className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-1\">Email Notifications</h2>\n                <p className=\"text-gray-600 text-sm\">Get notified via email (TEST MODE)</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-gray-900\">Enable email notifications</p>\n                  <p className=\"text-sm text-gray-500\">Receive email alerts for important events</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.email_enabled}\n                    onChange={() => handleToggle('email_enabled')}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600\"></div>\n                </label>\n              </div>\n\n              <div className=\"pl-6 space-y-3 border-l-2 border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-sm text-gray-700\">New conversations</p>\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.email_new_conversation}\n                    onChange={() => handleToggle('email_new_conversation')}\n                    disabled={!preferences.email_enabled}\n                    className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 disabled:opacity-50\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-sm text-gray-700\">High-priority messages</p>\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.email_high_priority}\n                    onChange={() => handleToggle('email_high_priority')}\n                    disabled={!preferences.email_enabled}\n                    className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 disabled:opacity-50\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-sm text-gray-700\">Performance alerts</p>\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.email_performance_alert}\n                    onChange={() => handleToggle('email_performance_alert')}\n                    disabled={!preferences.email_enabled}\n                    className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 disabled:opacity-50\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-sm text-gray-700\">Usage warnings</p>\n                  <input\n                    type=\"checkbox\"\n                    checked={preferences.email_usage_warning}\n                    onChange={() => handleToggle('email_usage_warning')}\n                    disabled={!preferences.email_enabled}\n                    className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 disabled:opacity-50\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t border-gray-200\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Email digest frequency\n                </label>\n                <select\n                  value={preferences.email_digest}\n                  onChange={(e) => handleSelectChange('email_digest', e.target.value)}\n                  disabled={!preferences.email_enabled}\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent disabled:opacity-50\"\n                >\n                  <option value=\"none\">Never</option>\n                  <option value=\"daily\">Daily</option>\n                  <option value=\"weekly\">Weekly</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* Push Notifications */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <div className=\"flex items-start gap-4 mb-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-500 rounded-xl flex items-center justify-center flex-shrink-0\">\n                <Globe className=\"w-6 h-6 text-white\" />\n              </div>\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-1\">Browser Push Notifications</h2>\n                <p className=\"text-gray-600 text-sm\">Get notified even when BotSmith is closed</p>\n              </div>\n            </div>\n\n            {!pushSupported ? (\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                <p className=\"text-sm text-yellow-800\">\n                  Push notifications are not supported in your browser. Please use Chrome, Firefox, or Safari.\n                </p>\n              </div>\n            ) : !pushEnabled ? (\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-gray-600\">\n                  Enable browser push notifications to stay updated even when you're not using BotSmith.\n                </p>\n                <button\n                  onClick={requestPushPermission}\n                  className=\"px-6 py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all\"\n                >\n                  Enable Push Notifications\n                </button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Enable push notifications</p>\n                    <p className=\"text-sm text-gray-500\">Receive browser notifications</p>\n                  </div>\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={preferences.push_enabled}\n                      onChange={() => handleToggle('push_enabled')}\n                      className=\"sr-only peer\"\n                    />\n                    <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-600\"></div>\n                  </label>\n                </div>\n\n                <div className=\"pl-6 space-y-3 border-l-2 border-gray-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm text-gray-700\">New conversations</p>\n                    <input\n                      type=\"checkbox\"\n                      checked={preferences.push_new_conversation}\n                      onChange={() => handleToggle('push_new_conversation')}\n                      disabled={!preferences.push_enabled}\n                      className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 disabled:opacity-50\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm text-gray-700\">High-priority messages</p>\n                    <input\n                      type=\"checkbox\"\n                      checked={preferences.push_high_priority}\n                      onChange={() => handleToggle('push_high_priority')}\n                      disabled={!preferences.push_enabled}\n                      className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 disabled:opacity-50\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm text-gray-700\">Performance alerts</p>\n                    <input\n                      type=\"checkbox\"\n                      checked={preferences.push_performance_alert}\n                      onChange={() => handleToggle('push_performance_alert')}\n                      disabled={!preferences.push_enabled}\n                      className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 disabled:opacity-50\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm text-gray-700\">Usage warnings</p>\n                    <input\n                      type=\"checkbox\"\n                      checked={preferences.push_usage_warning}\n                      onChange={() => handleToggle('push_usage_warning')}\n                      disabled={!preferences.push_enabled}\n                      className=\"w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 disabled:opacity-50\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <button\n              onClick={savePreferences}\n              disabled={saving}\n              className=\"px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-xl\"\n            >\n              <Save className=\"w-5 h-5\" />\n              {saving ? 'Saving...' : 'Save Preferences'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default NotificationPreferences;\n